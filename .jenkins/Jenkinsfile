#!/usr/bin/env groovy

// Continuous Integration script for clinicadl
// Author: mauricio.diaz@inria.fr

pipeline {
  options {
    timeout(time: 1, unit: 'HOURS')
    disableConcurrentBuilds(abortPrevious: true)
  }
  agent none
    stages {
      stage('Functional tests') {
        failFast false
        parallel {
          stage('No GPU') {
            agent {
              label 'cpu'
            }
            environment {
              CONDA_HOME = "$HOME/miniconda"
              CONDA_ENV = "$WORKSPACE/env"
              PATH = "$HOME/.local/bin:$PATH"
              TMP_DIR = "$HOME/tmp"
              INPUT_DATA_DIR = '/mnt/data/clinicadl_data_ci/data_ci'
            }
            stages {
              stage('Build Env') {
                steps {
                  echo 'Installing clinicadl sources in Linux...'
                  echo "My branch name is ${BRANCH_NAME}"
                  sh "echo 'My branch name is ${BRANCH_NAME}'"
                  sh 'printenv'
                  sh "echo 'Agent name: ${NODE_NAME}'"
                  sh '''
                    set +x
                    source "${CONDA_HOME}/etc/profile.d/conda.sh"
                    make env.conda
                    conda activate "${CONDA_ENV}"
                    conda info
                    echo "Install clinicadl using poetry..."
                    cd $WORKSPACE
                    make env
                    # Show clinicadl help message
                    echo "Display clinicadl help message"
                    clinicadl --help
                    conda deactivate
                    '''
                }
              }
              stage('CLI tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing pipeline instantiation...'
                      sh 'echo "Agent name: ${NODE_NAME}"'
                      sh '''
                      set +x
                      echo $WORKSPACE
                      source "${CONDA_HOME}/etc/profile.d/conda.sh"
                      conda activate "${CONDA_ENV}"
                      conda list
                      cd $WORKSPACE/tests
                      poetry run pytest \
                        --junitxml=./test-reports/test_cli_report.xml \
                        --verbose \
                        --disable-warnings \
                        test_cli.py
                      conda deactivate
                      '''
                  }
                }
              }
              stage('tsvtools tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing tsvtool tasks...'
                      sh "echo 'Agent name: ${NODE_NAME}'"
                      sh '''
                      source "${CONDA_HOME}/etc/profile.d/conda.sh"
                      conda activate "${CONDA_ENV}"
                      cd $WORKSPACE/tests
                      poetry run pytest \
                        --junitxml=./test-reports/test_tsvtool_report.xml \
                        --verbose \
                        --disable-warnings \
                        --basetemp=$TMP_DIR \
                        --input_data_directory=$INPUT_DATA_DIR \
                        test_tsvtools.py
                      conda deactivate
                      '''
                  }
                }
                post {
                  always {
                    junit 'tests/test-reports/test_tsvtool_report.xml'
                  }
                  success {
                    sh 'rm -rf ${TMP_DIR}/*'
                  }
                }
              }
              stage('Quality check tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing quality check tasks...'
                      sh "echo 'Agent name: ${NODE_NAME}'"
                      sh '''
                      source "${CONDA_HOME}/etc/profile.d/conda.sh"
                      conda activate "${CONDA_ENV}"
                      cd $WORKSPACE/tests
                      poetry run pytest \
                        --junitxml=./test-reports/test_quality_check_report.xml \
                        --verbose \
                        --disable-warnings \
                        --basetemp=$TMP_DIR \
                        --input_data_directory=$INPUT_DATA_DIR \
                        test_qc.py
                      conda deactivate
                      '''
                  }
                }
                post {
                  always {
                    junit 'tests/test-reports/test_quality_check_report.xml'
                  }
                  success {
                    sh 'rm -rf ${TMP_DIR}/*'
                  }
                }
              }
              stage('Generate tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing generate task...'
                      sh "echo 'Agent name: ${NODE_NAME}'"
                      sh '''
                        source "${CONDA_HOME}/etc/profile.d/conda.sh"
                        conda activate "${CONDA_ENV}"
                        cd $WORKSPACE/tests
                        poetry run pytest \
                          --junitxml=./test-reports/test_generate_report.xml \
                          --verbose \
                          --disable-warnings \
                          --basetemp=$TMP_DIR \
                          --input_data_directory=$INPUT_DATA_DIR \
                          test_generate.py
                        conda deactivate
                        '''
                  }
                }
                post {
                  always {
                    junit 'tests/test-reports/test_generate_report.xml'
                  }
                  success {
                    sh 'rm -rf ${TMP_DIR}/*'
                  }
                }
              }
              stage('Prepare data tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing prepare_data task...'
                      sh "echo 'Agent name: ${NODE_NAME}'"
                      sh '''
                        source "${CONDA_HOME}/etc/profile.d/conda.sh"
                        conda activate "${CONDA_ENV}"
                        cd $WORKSPACE/tests
                        poetry run pytest \
                          --junitxml=./test-reports/test_prepare_data_report.xml \
                          --verbose \
                          --disable-warnings \
                          --basetemp=$TMP_DIR \
                          --input_data_directory=$INPUT_DATA_DIR \
                          test_prepare_data.py
                        conda deactivate
                        '''
                  }
                }
                post {
                  always {
                    junit 'tests/test-reports/test_prepare_data_report.xml'
                  }
                  success {
                    sh 'rm -rf ${TMP_DIR}/*'
                  }
                }
              }
              stage('Predict tests Linux') {
                steps {
                  catchError(buildResult: 'FAILURE', stageResult: 'UNSTABLE') {
                    echo 'Testing predict...'
                    sh "echo 'Agent name: ${NODE_NAME}'"
                    sh '''
                      source "${CONDA_HOME}/etc/profile.d/conda.sh"
                      conda activate "${CONDA_ENV}"
                      cd $WORKSPACE/tests
                      poetry run pytest \
                          --junitxml=./test-reports/test_predict_report.xml \
                          --verbose \
                          --disable-warnings \
                          --basetemp=$TMP_DIR \
                          --input_data_directory=$INPUT_DATA_DIR \
                          test_predict.py
                      conda deactivate
                      '''
                  }
                }
                post {
                  always {
                    junit 'tests/test-reports/test_predict_report.xml'
                  }
                  success {
                    sh 'rm -rf ${TMP_DIR}/*'
                  }
                }
              }
            //               stage('Meta-maps analysis') {
            //                 environment {
            //                   PATH = "$HOME/miniconda3/bin:$HOME/miniconda/bin:$PATH"
            //                 }
            //                 steps {
            //                   echo 'Testing maps-analysis task...'
            //                     sh 'echo "Agent name: ${NODE_NAME}"'
            //                     sh '''#!/usr/bin/env bash
            //                       set +x
            //                       eval "$(conda shell.bash hook)"
            //                       conda activate "${WORKSPACE}/env"
            //                       cd $WORKSPACE/tests
            //                       pytest \
            //                         --junitxml=./test-reports/test_meta-analysis_report.xml \
            //                         --verbose \
            //                         --disable-warnings \
            //                         test_meta_maps.py
            //                       conda deactivate
            //                       '''
            //                 }
            //                 post {
            //                   always {
            //                     junit 'tests/test-reports/test_meta-analysis_report.xml'
            //                     sh 'rm -rf $WORKSPACE/tests/data/dataset'
            //                   }
            //                 }
            //              }
            }
            post {
              // Clean after build
              cleanup {
                cleanWs(deleteDirs: true,
                  notFailBuild: true,
                  patterns: [[pattern: 'env', type: 'INCLUDE']])
              }
            }
          }
        }
      }
    }
}
